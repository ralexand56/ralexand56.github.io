{"version":3,"sources":["styled-components.ts","animations.ts","App.tsx","serviceWorker.js","index.tsx"],"names":["styledComponents","styled","default","css","keyframes","ThemeProvider","fadeIn","_templateObject","trackingInBlur","_templateObject2","_templateObject3","baseUrl","Title","h2","App_templateObject","Overlay","div","App_templateObject2","_ref","className","react_default","a","createElement","App_templateObject3","Boolean","window","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qNAWIA,EAJOC,IAATC,QAOaD,KANbE,MACAC,YACAC,cAIaJ,u7BCZR,IAAMK,EAASF,oBAAHG,KA0BNC,GAjBaJ,oBAAHK,KAiBOL,oBAAHM,u0CCvB3B,IAAMC,EAAU,8BAOVC,EAAQX,EAAOY,GAAVC,IAMIN,GAGTO,EAAUd,EAAOe,IAAVC,KAeEhB,IAPe,SAAAiB,GAAA,IAAGC,EAAHD,EAAGC,UAAH,OAC5BC,EAAAC,EAAAC,cAAA,WAASH,UAAWA,GAClBC,EAAAC,EAAAC,cAACP,EAAD,MACAK,EAAAC,EAAAC,cAACV,EAAD,oFAIWX,CAAfsB,IAM2BZ,EAGZL,EAGcK,EAOAA,EAMAA,EAKAA,GCtDTa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOV,EAAAC,EAAAC,cAACS,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a978c182.chunk.js","sourcesContent":["import * as styledComponents from 'styled-components';\r\n// tslint:disable-next-line:no-duplicate-imports\r\nimport { ThemedStyledComponentsModule } from 'styled-components';\r\n\r\nimport ThemeInterface from './theme';\r\n\r\nconst {\r\n  default: styled,\r\n  css,\r\n  keyframes,\r\n  ThemeProvider,\r\n} = styledComponents as ThemedStyledComponentsModule<ThemeInterface>;\r\n\r\nexport { css, keyframes, ThemeProvider };\r\nexport default styled;\r\n","import { keyframes } from 'styled-components';\r\n\r\nexport const fadeIn = keyframes`\r\n  0% {\r\n    opacity: 0;\r\n  }\r\n  100% {\r\n    opacity: 1;\r\n  }\r\n`;\r\n\r\nexport const trackingIn = keyframes`\r\n  0% {\r\n    letter-spacing: 1em;\r\n    -webkit-transform: translateZ(400px);\r\n            transform: translateZ(400px);\r\n    opacity: 0;\r\n  }\r\n  40% {\r\n    opacity: 0.3;\r\n  }\r\n  100% {\r\n    -webkit-transform: translateZ(0);\r\n            transform: translateZ(0);\r\n    opacity: 0.5;\r\n  }\r\n`; \r\n\r\nexport const trackingInBlur = keyframes`\r\n  0% {\r\n    letter-spacing: 1em;\r\n    -webkit-transform: translateZ(300px);\r\n            transform: translateZ(300px);\r\n    -webkit-filter: blur(12px);\r\n            filter: blur(12px);\r\n    opacity: 0;\r\n  }\r\n  100% {\r\n    -webkit-transform: translateZ(12px);\r\n            transform: translateZ(12px);\r\n    -webkit-filter: blur(0);\r\n            filter: blur(0);\r\n    opacity: 0.5;\r\n  }\r\n`; ","import React, { SFC } from 'react';\nimport styled from './styled-components';\nimport ThemeInterface from './theme';\nimport { trackingInBlur, fadeIn } from './animations';\n\nconst baseUrl = 'http://ralexand56.github.io';\n\ninterface Props {\n  className?: string;\n  theme?: ThemeInterface;\n}\n\nconst Title = styled.h2`\n  font-size: 4.5em;\n  opacity: 0.5;\n  margin: 1em;\n  text-transform: uppercase;\n  color: whitesmoke;\n  animation: ${trackingInBlur} 1s cubic-bezier(0.215, 0.61, 0.355, 1) both;\n`;\n\nconst Overlay = styled.div`\n  opacity: 0.5;\n  background: black;\n  position: absolute;\n  height: 100%;\n  width: 100%;\n`;\n\nconst ElenaHome: SFC<Props> = ({ className }) => (\n  <section className={className}>\n    <Overlay />\n    <Title>Елена Пойлова</Title>\n  </section>\n);\n\nexport default styled(ElenaHome)`\n  display: flex;\n  opacity: 0;\n  justify-content: center;\n  align-items: flex-end;\n  background: black;\n  background-image: url('${baseUrl}/imgs/portraitCover.jpg');\n  background-size: cover;\n  height: 100%;\n  animation: ${fadeIn} 1s cubic-bezier(0.215, 0.61, 0.355, 1) both;\n\n  @media screen and (min-width: 320px) {\n    background-image: url('${baseUrl}/elena/imgs/portraitCover.jpg');\n    h2 {\n      font-size: 3.5em;\n    }\n  }\n\n  @media screen and (min-width: 600px) {\n    background-image: url('${baseUrl}/elena/imgs/portraitLandscape.jpg');\n  }\n\n  @media screen and (min-width: 768px) {\n    background-size: cover;\n    background-repeat: no-repeat;\n    background-image: url('${baseUrl}/elena/imgs/portraitCover.jpg');\n  }\n\n  @media screen and (min-width: 1200px) {\n    background-size: cover;\n    background-image: url('${baseUrl}/elena/imgs/portraitLandscape.jpg');\n  }\n`;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}